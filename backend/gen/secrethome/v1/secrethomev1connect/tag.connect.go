// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: secrethome/v1/tag.proto

package secrethomev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	v1 "secrethome-back/gen/secrethome/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TagServiceName is the fully-qualified name of the TagService service.
	TagServiceName = "secrethome.v1.TagService"
)

// TagServiceClient is a client for the secrethome.v1.TagService service.
type TagServiceClient interface {
	AddTag(context.Context, *connect_go.Request[v1.AddTagRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewTagServiceClient constructs a client for the secrethome.v1.TagService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tagServiceClient{
		addTag: connect_go.NewClient[v1.AddTagRequest, emptypb.Empty](
			httpClient,
			baseURL+"/secrethome.v1.TagService/AddTag",
			opts...,
		),
	}
}

// tagServiceClient implements TagServiceClient.
type tagServiceClient struct {
	addTag *connect_go.Client[v1.AddTagRequest, emptypb.Empty]
}

// AddTag calls secrethome.v1.TagService.AddTag.
func (c *tagServiceClient) AddTag(ctx context.Context, req *connect_go.Request[v1.AddTagRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.addTag.CallUnary(ctx, req)
}

// TagServiceHandler is an implementation of the secrethome.v1.TagService service.
type TagServiceHandler interface {
	AddTag(context.Context, *connect_go.Request[v1.AddTagRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewTagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagServiceHandler(svc TagServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/secrethome.v1.TagService/AddTag", connect_go.NewUnaryHandler(
		"/secrethome.v1.TagService/AddTag",
		svc.AddTag,
		opts...,
	))
	return "/secrethome.v1.TagService/", mux
}

// UnimplementedTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagServiceHandler struct{}

func (UnimplementedTagServiceHandler) AddTag(context.Context, *connect_go.Request[v1.AddTagRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("secrethome.v1.TagService.AddTag is not implemented"))
}
